#!/usr/bin/env bash

MODE=echo
WG_OUTPUT=${WG_OUTPUT}
WG_DEFAULT_GW=${WG_DEFAULT_GW:-no}

APP_NAME="$0"
SHOW_HELP=

for arg; do
  case $arg in
    --wg-conf)
      shift
      WG_OUTPUT=
      ;;

    --wg-quick)
      shift
      WG_OUTPUT=wg-quick
      ;;

    --openwrt)
      shift
      WG_OUTPUT=openwrt
      ;;

    --mikrotik)
      shift
      WG_OUTPUT=mikrotik
      ;;

    --default)
      shift
      WG_DEFAULT_GW=yes
      ;;

    --echo)
      shift
      MODE=echo
      ;;

    --qr)
      shift
      MODE=qr
      ;;

    --qr-png)
      shift
      MODE=qr_png
      ;;

    --shell)
      shift
      MODE=shell
      ;;

    --ssh)
      SSH_SERVER="$2"
      shift 2
      MODE=ssh
      ;;

    -h|--help)
      shift
      SHOW_HELP=1
      ;;

    --*)
      echo "unknown $arg."
      exit 1
      ;;
    
    *)
      break
      ;;
  esac
done

usage() {
  stderr "$APP_NAME" "[options]" "$@"
  stderr ""
  stderr "Modes:"
  stderr " --echo: show the output (default)"
  stderr " --shell: execute commands on shell"
  stderr " --qr: output QR code"
  stderr " --ssh USER@HOST: upload ssh config to remote machine"
  stderr ""
  stderr "Options:"
  stderr " --wg-conf: output wg-quick compatible configuration (default)"
  stderr " --wg-quick: output wg-quick compatible commands"
  stderr " --openwrt: output openwrt compatible configuration"
  stderr " --mikrotik: output mikrotik compatible configuration"
  stderr ""
  exit 1
}

echo_wgconf() {
  if [[ -z "$WG_OUTPUT" ]] || [[ "$WG_OUTPUT" == "wg-quick" ]]; then
    echo "$@"
  fi
}

echo_wgquick() {
  if [[ "$WG_OUTPUT" == "wg-quick" ]]; then
    echo "$@"
  fi
}

echo_openwrt() {
  if [[ "$WG_OUTPUT" == "openwrt" ]]; then
    echo "$@"
  fi
}

echo_mikrotik() {
  if [[ "$WG_OUTPUT" == "mikrotik" ]]; then
    echo "$@"
  fi
}

if_ne() {
  key="$1"
  shift
  [[ -z "$key" ]] || [[ "$key" == "no" ]] || "$@"
}

unless_disabled() {
  key="$1"
  shift
  [[ "$key" == "0" ]] || "$@"
}

emit_config_pre() {
  export interface_name="wg-${server_name}"
  if [[ "$WG_OUTPUT" == "openwrt" ]]; then
    export interface_name="wg_${server_name}"
  fi

  echo_wgquick "mkdir -p /etc/wireguard/"
  echo_wgquick "umask 0177"
  echo_wgquick "cat <<EOF > /etc/wireguard/${interface_name}.conf"
}

emit_config_interface() {
  local interface_config="$1"
  local interface_config_name=$(basename "$interface_config" .conf)
  local interface_publickey=$(require_value "$interface_config" "PublicKey")
  local interface_privatekey=$(require_value "$interface_config" "PrivateKey")
  local interface_address=$(get_value "$interface_config" "Address")
  local interface_address6=$(get_value "$interface_config" "Address6")
  local interface_listenport=$(get_value "$interface_config" "ListenPort")
  local interface_default_gateway=$(get_value "$interface_config" "DefaultGateway")
  local interface_fwmark=$(get_value "$interface_config" "FwMark")
  local interface_mtu=$(get_value "$interface_config" "MTU")

  local peer_config="$2"
  local peer_dns=$(get_value "$peer_config" "DNS")
  local peer_mtu=$(get_value "$peer_config" "MTU")

  if [[ -z "$interface_name" ]]; then
    interface_name="$interface_config_name"
  fi

  if [[ -z "$interface_address" ]]; then
    interface_address="$(require_address_idx "$peer_config" "$interface_config")"
  fi

  if [[ -z "$interface_address6" ]]; then
    interface_address6="$(get_address6_prefix "$peer_config" "$interface_config")"
  fi

  echo_wgconf "[Interface]"
  echo_mikrotik ":if ([/interface/wireguard/find name=\"$interface_name\"]) do={} else={ /interface/wireguard/add name=\"$interface_name\" }"
  echo_mikrotik "/interface/wireguard/peers/remove [find interface=\"$interface_name\"]"
  echo_openwrt "uci set network.$interface_name=interface"
  echo_openwrt "uci set network.$interface_name.proto=wireguard"
  echo_openwrt "uci set network.$interface_name.private_key=$interface_privatekey"

  echo_wgconf "PrivateKey=$interface_privatekey"
  echo_mikrotik "/interface/wireguard/set [find name=\"$interface_name\"] private-key=\"$interface_privatekey\""

  if_ne "$interface_fwmark" echo_wgconf "FwMark=$interface_fwmark"
  if_ne "$interface_fwmark" echo_openwrt "uci set network.$interface_name.fwmark=$interface_fwmark"

  echo_wgconf "Address=$interface_address"
  echo_mikrotik ":if ([/ip/address/find address=\"$interface_address\" interface=\"$interface_name\"]) do={} else={ /ip/address/add address=\"$interface_address\" interface=\"$interface_name\" }"
  echo_openwrt "uci set network.$interface_name.addresses=$interface_address"

  if_ne "$interface_address6" echo_wgconf "Address=$interface_address6"
  if_ne "$interface_address6" echo_mikrotik ":if ([/ipv6/address/find address=\"$interface_address6\" interface=\"$interface_name\"]) do={} else={ /ipv6/address/add address=\"$interface_address6\" interface=\"$interface_name\" advertise=no }"
  if_ne "$interface_address6" echo_openwrt "uci add_list network.$interface_name.addresses=$interface_address6"

  if_ne "$interface_listenport" echo_wgconf "ListenPort=${interface_listenport}"
  if_ne "$interface_listenport" echo_mikrotik "/interface/wireguard/set [find name=\"$interface_name\"] listen-port=\"${interface_listenport}\""
  if_ne "$interface_listenport" echo_openwrt "uci set network.$interface_name.listen_port=${interface_listenport}"

  if_ne "$interface_default_gateway" echo_wgconf "PostUp=sysctl net.ipv4.ip_forward=1; iptables -I FORWARD -i %i -j ACCEPT; iptables -t nat -I POSTROUTING -o $interface_default_gateway -j MASQUERADE"
  if_ne "$interface_default_gateway" echo_wgconf "PostDown=iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $interface_default_gateway -j MASQUERADE"

  if_ne "$interface_address6" if_ne "$interface_default_gateway" echo_wgconf "PostUp=sysctl net.ipv6.conf.all.forwarding=1; sysctl net.ipv6.conf.all.proxy_ndp=1; ip6tables -I FORWARD -i %i -j ACCEPT"
  if_ne "$interface_address6" if_ne "$interface_default_gateway" echo_wgconf "PostDown=ip6tables -D FORWARD -i %i -j ACCEPT"

  if_ne "$peer_dns" echo_wgconf "DNS=$peer_dns"

  if_ne "$peer_mtu" echo_wgconf "MTU=$peer_mtu"
  if_ne "$peer_mtu" echo_mikrotik "/interface/wireguard/set [find name=\"$interface_name\"] mtu=\"$peer_mtu\""
  if_ne "$peer_mtu" echo_openwrt "uci set network.$interface_name.mtu=$peer_mtu"

  echo_openwrt "uci show network | grep '=wireguard_${interface_name}$' | cut -d= -f1 | xargs -rn1 uci delete"

  echo
}

emit_config_peer() {
  local interface_config="$2"
  local interface_config_name=$(basename "$interface_config" .conf)

  if [[ -z "$interface_name" ]]; then
    interface_name="$interface_config_name"
  fi

  local interface_disable_ipv6=$(get_value "$interface_config" "DisableIPv6")

  local peer_config="$1"

  local peer_name=$(basename "$peer_config" .conf)
  local peer_publickey=$(require_value "$peer_config" "PublicKey")
  local peer_address=$(get_value "$peer_config" "Address")
  local peer_address6=$(get_value "$peer_config" "Address6")
  local peer_routes=$(get_value "$peer_config" "Routes_${interface_config_name}" "Routes")
  local peer_routes6=$(get_value "$peer_config" "Routes6_${interface_config_name}" "Routes6")
  local interface_route_allowed_ips=$(get_value "$interface_config" "RouteAllowedIPs")
  local interface_keepalive=$(get_value "$interface_config" "PersistentKeepalive")
  local peer_endpoint=$(get_value "$peer_config" "Endpoint")
  local peer_listenport=$(get_value "$peer_config" "ListenPort")
  local psk=$(get_psk "$peer_config" "$interface_config")

  if [[ -z "$interface_route_allowed_ips" ]]; then
    interface_route_allowed_ips=1
  fi

  if [[ -z "$peer_address" ]]; then
    peer_address="$(require_address_idx "$interface_config" "$peer_config")"
  fi
  peer_address=$(ip_network "$peer_address")

  if [[ -n "$interface_disable_ipv6" ]]; then
    peer_address6=""
    peer_routes6=""
  elif [[ -z "$peer_address6" ]]; then
    peer_address6="$(get_address6_prefix "$interface_config" "$peer_config")"
  fi
  peer_address6=$(ip6_network "$peer_address6")

  echo_wgconf "[Peer]"
  echo_openwrt "uci set network.${interface_name}_${peer_name}=wireguard_${interface_name}"
  echo_openwrt "uci set network.${interface_name}_${peer_name}.description=${peer_name}"

  echo_wgconf "PublicKey=$peer_publickey"
  echo_mikrotik "/interface/wireguard/peers/add interface=\"$interface_name\" comment=\"$peer_name\" public-key=\"$peer_publickey\" allowed-address=\"$peer_address\""
  echo_openwrt "uci set network.${interface_name}_${peer_name}.public_key=$peer_publickey"

  if_ne "$psk" echo_wgconf "PresharedKey=$psk"
  if_ne "$psk" echo_mikrotik "/interface/wireguard/peers/set [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] preshared-key=\"$psk\""
  if_ne "$psk" echo_openwrt "uci set network.${interface_name}_${peer_name}.preshared_key=${psk}"

  if_ne "$peer_endpoint" echo_wgconf "Endpoint=$peer_endpoint:${peer_listenport:-$DEFAULT_LISTEN_PORT}"
  if_ne "$peer_endpoint" echo_mikrotik "/interface/wireguard/peers/set [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] comment=\"$peer_endpoint\" endpoint-address=\"$peer_endpoint\" endpoint-port=\"${peer_listenport:-$DEFAULT_LISTEN_PORT}\""
  if_ne "$peer_endpoint" echo_openwrt "uci set network.${interface_name}_${peer_name}.endpoint_host=${peer_endpoint}"
  if_ne "$peer_endpoint" echo_openwrt "uci set network.${interface_name}_${peer_name}.endpoint_port=${peer_listenport:-$DEFAULT_LISTEN_PORT}"

  if_ne "$interface_keepalive" echo_wgconf "PersistentKeepalive=$interface_keepalive"
  if_ne "$interface_keepalive" echo_mikrotik "/interface/wireguard/peers/set [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] persistent-keepalive=\"$interface_keepalive\""
  if_ne "$interface_keepalive" echo_openwrt "uci set network.${interface_name}_${peer_name}.persistent_keepalive=${interface_keepalive}"

  echo_wgconf "AllowedIPs=$peer_address"
  echo_openwrt "uci set network.${interface_name}_${peer_name}.allowed_ips=${peer_address}"
  echo_openwrt "uci set network.${interface_name}_${peer_name}.route_allowed_ips=${interface_route_allowed_ips}"
  unless_disabled "$interface_route_allowed_ips" echo_mikrotik ":if ([/ip/route/find dst-address=\"${peer_address}\" gateway=\"${interface_name}\"]) do={} else={ /ip/route/add dst-address=\"${peer_address}\" gateway=\"${interface_name}\" }"

  if_ne "$peer_address6" echo_wgconf "AllowedIPs=$peer_address6"
  if_ne "$peer_address6" echo_openwrt "uci add_list network.${interface_name}_${peer_name}.allowed_ips=${peer_address6}"
  if_ne "$peer_address6" echo_mikrotik "/interface/wireguard/peers/set [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] allowed-address=([get [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] allowed-address], \"$peer_address6\")"
  if_ne "$peer_address6" unless_disabled "$interface_route_allowed_ips" echo_mikrotik ":if ([/ipv6/route/find dst-address=\"${peer_address6}\" gateway=\"${interface_name}\"]) do={} else={ /ipv6/route/add dst-address=\"${peer_address6}\" gateway=\"${interface_name}\" }"

  if [[ "$WG_DEFAULT_GW" == "yes" ]]; then
    peer_routes="$peer_routes 0.0.0.0/0"

    if [[ -n "$peer_address6" ]]; then
      peer_routes6="$peer_routes6 ::/0"
    fi
  fi

  for route in $peer_routes; do
    route=$(ip_network "$route")
    echo_wgconf "AllowedIPs=$route"
    echo_mikrotik "/interface/wireguard/peers/set [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] allowed-address=([get [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] allowed-address], \"$route\")"
    unless_disabled "$interface_route_allowed_ips" echo_mikrotik ":if ([/ip/route/find dst-address=\"${route}\" gateway=\"${interface_name}\"]) do={} else={ /ip/route/add dst-address=\"${route}\" gateway=\"${interface_name}\" }"
    echo_openwrt "uci add_list network.${interface_name}_${peer_name}.allowed_ips=${route}"
  done

  for route6 in $peer_routes6; do
    route6=$(ip6_network "$route6")
    echo_wgconf "AllowedIPs=$route6"
    echo_mikrotik "/interface/wireguard/peers/set [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] allowed-address=([get [find interface=\"$interface_name\" public-key=\"$peer_publickey\"] allowed-address], \"$route6\")"
    unless_disabled "$interface_route_allowed_ips" echo_mikrotik ":if ([/ipv6/route/find dst-address=\"${route6}\" gateway=\"${interface_name}\"]) do={} else={ /ipv6/route/add dst-address=\"${route6}\" gateway=\"${interface_name}\" }"
    echo_openwrt "uci add_list network.${interface_name}_${peer_name}.allowed_ips=${route6}"
  done

  echo
}

emit_config_post() {
  local interface_config="$1"
  local interface_config_name=$(basename "$interface_config" .conf)
  local interface_address6=$(get_value "$interface_config" "Address6")
  local interface_default_gateway=$(get_value "$interface_config" "DefaultGateway")

  echo_wgquick "EOF"
  echo_wgquick "systemctl enable wg-quick@${interface_name}.service"
  echo_wgquick "systemctl restart wg-quick@${interface_name}.service"

  if [[ -n "$interface_address6" ]] && [[ -n "$interface_default_gateway" ]]; then
    echo_wgquick "cat <<EOF > /etc/ndppd.conf"
    echo_wgquick "proxy $interface_default_gateway {"
    echo_wgquick "  rule $(ip6_network "$interface_address6") { static }"
    echo_wgquick "}"
    echo_wgquick "EOF"

    echo_wgquick "systemctl enable ndppd.service"
    echo_wgquick "systemctl restart ndppd.service"
  fi

  echo_openwrt "uci commit"

  echo_openwrt "luci-reload"
  echo_openwrt "ifup ${interface_name}"
  echo_openwrt "grep -q /usr/bin/wireguard_watchdog /etc/crontabs/root || echo '* * * * * /usr/bin/wireguard_watchdog' >> /etc/crontabs/root"
}

echo_mode() {
  eval "$@"
}

qr_mode() {
  if [[ -n "$WG_OUTPUT" ]]; then
    stderr 'Only `--wg-conf` is supported'
    return 1
  fi

  eval "$@" | qrencode -t ansiutf8
}

qr_png_mode() {
  if [[ -n "$WG_OUTPUT" ]]; then
    stderr 'Only `--wg-conf` is supported'
    return 1
  fi

  eval "$@" | qrencode -t png -o -
}

shell_mode() {
  if [[ -z "$WG_OUTPUT" ]]; then
    stderr 'The `--wg-conf` is not supported'
    return 1
  fi

  (
    echo_wgquick 'set -x'
    echo_openwrt 'set -x'
    eval "$@"
  ) | bash
}

ssh_mode() {
  if [[ -z "$WG_OUTPUT" ]]; then
    stderr 'The `--wg-conf` is not supported'
    return 1
  fi

  echo "ssh $SSH_SERVER"

  (
    echo_wgquick 'set -x'
    echo_openwrt 'set -x'
    eval "$@"
  ) | ssh -T "$SSH_SERVER"
}
