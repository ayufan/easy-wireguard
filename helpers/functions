#!/usr/bin/env bash

if [[ -e .env ]]; then
  source .env
fi

DEFAULT_LISTEN_PORT=51820

shopt -s nullglob

get_value() {
  local config="$1"
  shift

  if [[ ! -e "$config" ]]; then
    return
  fi

  (
    for i; do
      unset "$i"
    done

    source "$config"

    for i; do
      shift
      if declare -p "$i" &>/dev/null; then
        echo "${!i}"
        return
      elif [[ "$i" == "-" ]]; then
        break
      fi
    done

    echo "$@"
  )
}

require_value() {
  local config="$1"
  shift

  if [[ ! -e "$config" ]]; then
    stderr "$config is missing"
    return 1
  fi

  (
    for i; do
      unset "$i"
    done

    source "$config"

    for i; do
      if declare -p "$i" &>/dev/null; then
        echo "${!i}"
        return
      fi
    done

    stderr "$config the $i is missing"
    return 1
  )

  return $?
}

get_psk() {
  local psk_a=$(get_value "$1" "PresharedKey")
  local psk_b=$(get_value "$2" "PresharedKey")

  if [[ "$psk_a" < "$psk_b" ]]; then
    echo "$psk_a$psk_b"
  else
    echo "$psk_b$psk_a"
  fi
}

stderr() {
  echo "$@" 1>&2
}

validate_name() {
  if [[ ! $1 =~ ^[a-z0-9_]+$ ]]; then
    stderr "The '$1' needs to be ^[a-z0-9_]+$."
    return 1
  fi
}

atoi() {
  #Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
  local IP=$1; local IPNUM=0
  for (( i=0 ; i<4 ; ++i )); do
  ((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
  IP=${IP#*.}
  done
  echo $IPNUM
}

itoa() {
  #returns the dotted-decimal ascii form of an IP arg passed in integer format
  echo -n $(($(($(($((${1}/256))/256))/256))%256)).
  echo -n $(($(($((${1}/256))/256))%256)).
  echo -n $(($((${1}/256))%256)).
  echo $((${1}%256))
}

ip_network() {
  local IFS=/
  local ips=( $1 )
  local ip="${ips[0]}"
  local netmask="${ips[1]}"

  if [[ -z "$netmask" ]] || [[ "$netmask" == 32 ]]; then
    echo "$ip"
    return 0
  fi

  local mask=$((0xffffffff << (32 - $netmask)))
  local ip=$(atoi "$ip")
  local ip=$(($ip & $mask))
  echo "$(itoa "$ip")/$netmask"
}

alloc_address() {
  local node_ip="$1"
  local node_publickey="$2"
  local startip=$(atoi "$3")
  local endip=$(atoi "$4")

  for (( i=$startip; i<=$endip; i=i+1 )); do
    local ip=$(itoa $i)
    local ipfile="addresses/$ip.node"
    local ipfile_ip=""
    local ipfile_publickey=""
    local ipfile_rest=""

    if [[ -e "$ipfile" ]]; then
      read "-d\n" ipfile_ip ipfile_publickey ipfile_rest < "$ipfile"
    fi

    if [[ "$ipfile_ip" == "$node_ip" ]] && [[ "$ipfile_publickey" == "$node_publickey" ]]; then
      # return existing IP
      echo "$ip"
      return 0
    fi

    if [[ -z "$ipfile_ip" ]] || [[ "$ipfile_ip" == "$node_ip" ]] || [[ "$ipfile_publickey" == "$node_publickey" ]]; then
      # allocate or rewrite IP-file
      echo "$node_ip" > $ipfile
      echo "$node_publickey" >> $ipfile
      echo "$ip"
      return 0
    fi
  done

  echo "No free addresses" 1>&2
  return 1
}

next_address_idx() {
  [[ -f clients/index ]] || echo 0 > clients/index

  idx=$(cat clients/index)
  echo $(($idx+1)) > clients/index
  echo "$idx"
}

require_address_idx() {
  local server_config="$1"
  local peer_config="$2"

  if [[ -z "$server_config" ]]; then
    stderr "Cannot generate interface_address for $peer_config."
    return 1
  fi

  local start_ip=$(require_value "$server_config" "StartIp")
  local end_ip=$(require_value "$server_config" "EndIp")
  local idx_i=$(require_value "$peer_config" "AddressIdx")

  local start_ip_i=$(atoi "$start_ip")
  local end_ip_i=$(atoi "$end_ip")
  local ip_i=$(($start_ip_i+$idx_i))

  if [[ $ip_i -ge $end_ip_i ]]; then
    stderr "The $idx is not within a $start_ip:$end_ip."
    return 1
  fi

  echo "$(itoa "$ip_i")/32"
}

ip6_network() {
  local IFS=/
  local ips=( $1 )
  local netmask="${ips[1]}"

  local IFS=:
  local ip=( ${ips[0]} )

  if [[ -z "$netmask" ]] || [[ "$netmask" == 128 ]]; then
    echo "$ip"
    return 0
  fi

  for (( i=7; i>=0; i-- )); do
    local mask=$(($i*16+16-$netmask))

    if [[ $mask -ge 16 ]]; then
      ip[$i]=""
      continue
    fi

    local mask=$((0xffff << $mask))
    local ipmask=$((0x${ip[$i]:-0} & $mask))
    if [[ "$ipmask" != "0" ]]; then
      ip[$i]=$(printf "%x" $ipmask)
    else
      ip[$i]=""
    fi

    break
  done

  local ip6="${ip[0]}:${ip[1]}:${ip[2]}:${ip[3]}:${ip[4]}:${ip[5]}:${ip[6]}:${ip[7]}/${netmask}"
  local ip6=${ip6/::::\//::\/}
  local ip6=${ip6/::::\//::\/}
  local ip6=${ip6/:::\//::\/}
  local ip6=${ip6/\/128/}

  echo "$ip6"
}

get_address6_prefix() {
  local server_config="$1"
  local peer_config="$2"

  if [[ -z "$server_config" ]]; then
    return 0
  fi

  local prefix6=$(get_value "$server_config" "Prefix6")
  local disable_ipv6=$(get_value "$peer_config" "DisableIPv6")
  local idx_i=$(get_value "$peer_config" "AddressIdx")

  if [[ -z "$idx_i" ]] || [[ -z "$prefix6" ]] || [[ -n "$disable_ipv6" ]]; then
    return 0
  fi

  # 2001:bc8:628:104b:e:f:g:h
  # 2001:bc8:628:104b: 64 bits
  # e: 16 bits
  # f: 16 bits: an index
  # g: 16 bits: pk hash 2 bytes
  # h: 16 bits: pk hash 2 bytes

  local IFS=:
  local ip=( $prefix6 )
  local netmask=96

  local key_hash=$(get_value "$peer_config" "PrivateKey" | sha256sum | awk '{print $1}')

  ip[5]=$(printf "%x" $idx_i)
  ip[6]=$(printf "%x" $((0x${key_hash:56:4})))
  ip[7]=$(printf "%x" $((0x${key_hash:60:4})))

  echo "${ip[0]}:${ip[1]}:${ip[2]}:${ip[3]}:${ip[4]}:${ip[5]}:${ip[6]}:${ip[7]}/${netmask}"
}

peer_allowed() {
  local interface_config="$2"
  local interface_config_name=$(basename "$interface_config" .conf)

  local peer_config="$1"
  local peer_name=$(basename "$peer_config" .conf)

  local interface_strict=$(get_value "$peer_config" "Strict")
  local peer_allowed=$(get_value "$peer_config" "Interface_${interface_config_name}" "Interface")

  if [[ "$interface_strict" ]]; then
    # In a strict mode peer needs to be allowed
    [[ "$peer_allowed" == "1" ]]
  else
    # We accept, `nil: default`, or `1`
    [[ "$peer_allowed" != "0" ]]
  fi
}
